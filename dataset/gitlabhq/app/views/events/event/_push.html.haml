.event-title
  %span.author_name= link_to_author event
  %span.event_label.pushed #{event.action_name} #{event.ref_type}
  - if event.rm_ref?
    %strong= event.ref_name
  - else
    %strong
      = link_to event.ref_name, namespace_project_commits_path(event.project.namespace, event.project, event.ref_name)
  at
  = link_to_project event.project

- if event.push_with_commits?
  - project = event.project
  .event-body
    %ul.well-list.event_commits
      - few_commits = event.commits[0...2]
      - few_commits.each do |commit|
        = render "events/commit", commit: commit, project: project

      - create_mr = event.new_ref? && create_mr_button?(event.project.default_branch, event.ref_name, event.project)
      - if event.commits_count > 1
        %li.commits-stat
          - if event.commits_count > 2
            %span ... and #{event.commits_count - 2} more commits.

          - if event.md_ref?
            - from = event.commit_from
            - from_label = truncate_sha(from)
          - else
            - from = event.project.default_branch
            - from_label = from

          = link_to namespace_project_compare_path(event.project.namespace, event.project, from: from, to: event.commit_to) do
            Compare #{from_label}...#{truncate_sha(event.commit_to)}

          - if create_mr
            %span{"data-user-is" => event.author_id, "data-display" => "inline"}
              or
              = link_to create_mr_path(event.project.default_branch, event.ref_name, event.project) do
                create a merge request
      - elsif create_mr
        %li.commits-stat{"data-user-is" => event.author_id}
          = link_to create_mr_path(event.project.default_branch, event.ref_name, event.project) do
            Create Merge Request
